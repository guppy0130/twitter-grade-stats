{{#> base}}

{{#* inline "content"}}

<div id="user-graph-container">
    <canvas id="user-graph"></canvas>
</div>
{{#each stats}}
<p>{{@key}}: {{this}}</p>
{{/each}}
<button id="tweet-table-toggle" onclick="toggleTweetTable()">View Tweets</button>
<table id="tweet-table">
	{{#each tweets}}
	<tr>
		<td>{{text}}</td>
		<td>{{grade}}</td>
	</tr>
	{{/each}}
</table>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.min.js" integrity="sha256-CfcERD4Ov4+lKbWbYqXD6aFM9M51gN4GUEtDhkWABMo=" crossorigin="anonymous"></script>
<script>
    /* GRAPH STUFF */
    var min = {{{stats.min}}},
        max = {{{stats.max}}},
        sampMean = {{{stats.sampMean}}},
        sampStdDev = {{{stats.sampStdDev}}},
        data = {{{stats.bins}}},
        ideal = {{{stats.ideal}}};

    /*
     * takes an object of format `{bin: count}` and deconstructs it to
     * sortedBins, an array of bins in sorted order, and
     * sortedCounts, an array of counts in sorted order
     */

    function sortAndFlatten(object) {
        var sortedCounts = [],
            sortedBins = [];
        sortedBins = Object.keys(object).sort(function(a, b) {
            return a - b;
        });
        sortedBins.forEach(function(item) {
            sortedCounts.push(object[item]);
        });
        return [sortedBins, sortedCounts];
    }

    var [dataBins, dataBinCounts] = sortAndFlatten(data);
    var [idealBins, idealBinCounts] = sortAndFlatten(ideal);

    var userChartData = {
        labels: dataBins,
        datasets: [
            {
                type: 'line',
                label: 'Smooth Graph',
                data: idealBinCounts,
                backgroundColor: 'rgba(255, 99, 132, 0.4)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1
            },
            {
                type: 'bar',
                label: 'Your Tweets',
                data: dataBinCounts,
                backgroundColor: 'rgba(54, 162, 235, 0.6)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }
        ]
    }

    var userChartOptions = {
        title: {
            display: true,
            text: "Your Tweets' Grade Levels"
        },
        tooltips: {
            mode: 'index'
        },
        scales: {
            xAxes: [{
                scaleLabel: {
                    display: true,
                    labelString: 'Grade Level'
                }
            }],
            yAxes: [{
                scaleLabel: {
                    display: true,
                    labelString: '# of Tweets'
                }
            }]
        }
    }

    var ctx = document.getElementById('user-graph').getContext('2d');
    var chart = new Chart(ctx, {
        type: 'bar',
        data: userChartData,
        options: userChartOptions
    });

    /* DISPLAY STUFF */
    function toggleTweetTable() {
        var tweetTable = document.getElementById('tweet-table').style.display;
        if (tweetTable == '' || tweetTable == 'table') {
            document.getElementById('tweet-table').style.display = 'none';
            document.getElementById('tweet-table-toggle').innerText = 'View Tweets';
        } else {
            document.getElementById('tweet-table').style.display = 'table';
            document.getElementById('tweet-table-toggle').innerText = 'Hide Tweets';
        }
    }
    // show by default, then hide because it's kinda big
    toggleTweetTable();

</script>
{{/inline}}
{{/base}}
